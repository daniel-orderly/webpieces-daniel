plugins {
    id 'com.gradle.build-scan' version '1.0'
    id "com.dorongold.task-tree" version "1.2.2"
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

allprojects {
}

subprojects {
   apply plugin: 'java'
   apply plugin: 'eclipse'
   apply plugin: 'idea'

   //We could do this just for the template projects, BUT during debugging, it is sooo
   //damn nice to have the var names, it is worth the performance penalty I think though
   //we could change this
   [compileJava, compileTestJava]*.options.collect {options ->
     options.compilerArgs.add '-parameters'
   }

   buildDir = file('output')
   //This is an input directory that we read jars from if they are not in a repo somewhere
   project.ext.fixedLibDir = file('lib')
   project.ext.toStagingDir = file(new File(buildDir, 'alljars'))
   archivesBaseName = "webpieces-${it.name}"

   repositories {
       mavenCentral()
   }
   dependencies {
       testCompile 'junit:junit:4.11'
       //for logging in tests
       testCompile 'org.codehaus.groovy:groovy-all:2.4.6'

       compile 'javax.inject:javax.inject:1'
       compile 'org.slf4j:slf4j-api:1.7.21'
       //do we need this one..
       //compile 'ch.qos.logback:logback-core:1.1.7'
       compile 'ch.qos.logback:logback-classic:1.1.7'
       compile 'joda-time:joda-time:2.9.4'

       //This line includes any jars a developer drops into {project}/lib directory
       compile fileTree(dir: 'lib', include: '*.jar')
   }

   //This is really only needed for devrouter, embeddablewebserver, http-client, and embeddablehttpproxy
   //I wonder if we can list out those few projects and this task to each one and the assemble.dependsOn as well
   //let's at least copy all jars to a single directory to use in creating an application...
   //ALSO, this DELETES jars we no longer use so it has to be different directory than the dest jar we are creating as well
   task syncJars(type: Sync, dependsOn: 'jar') {
       from(configurations.compile) {}
       from(fixedLibDir) {}
       from(libsDir) {}
       into toStagingDir
   }

   assemble.dependsOn('syncJars')

   test{
      beforeTest{ descr ->
        logger.warn("Starting Test ${descr.className} : ${descr.name}")
      }
   }

   //Using eclipse bin folder is WAY too common.  use outputeclipse instead so we can safely ignore it
   eclipse {
      classpath {
         defaultOutputDir = file('eclipse-output')
      }
   }

   eclipseProject {
      doLast {
         // https://discuss.gradle.org/t/how-to-write-properties-to-3rd-party-eclipse-settings-files/6499/2

         def props = new Properties()
         file(".settings/org.eclipse.jdt.core.prefs").withInputStream {
            stream -> props.load(stream)
         }
         props.setProperty("org.eclipse.jdt.core.compiler.codegen.methodParameters", "generate")
         file(".settings/org.eclipse.jdt.core.prefs").withOutputStream {
            stream -> props.store(stream, null)
         }
     }
   }
}

