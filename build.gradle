buildscript {
    repositories {
        mavenCentral()
        maven {
           url "https://dl.bintray.com/deanhiller/maven"
        }

        //Comment out to suck in dependencies from local repo
        //sometimes you want to build the gradle plugin and then feed into your current project
        //and this allows you to build the local one then use it
        //maven {
        //    name = 'myTemp'
        //    url = "file:/tmp/myRepo/"
        //}
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'gradle.plugin.co.riiid:gradle-github-plugin:0.4.2'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.5"

        //we created a pull request on this but until then, use our customer forked one
        //classpath fileTree(dir: 'gradle/deanslib', includes: ['gradle-nexus-staging-plugin-0.5.4-SNAPSHOT.jar'])
        //classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"

        //We use an older version of our own html compiler to pre-build html tags for clients
        //of webpieces...
        //TODO: fix this with composite builds!!!
        classpath 'org.webpieces:gradle-plugin-htmlcompiler:2.1.0'
    }
}

//plugins loaded from special gradle plugin repo...
plugins {
    id "com.dorongold.task-tree" version "1.5" //This prints out a task tree (pretty print)
}

//This is only used in the master project to close a repo and promote with nexus..(and the plugin only allows top level usage)
//apply plugin: 'io.codearte.nexus-staging'

ext {
    // Project constants

    /*
     * Dependencies can be named so that sub-projects can reference consistent version of them.
     * dependencies {
     *     compile deps['guava']
     * }
     */
    deps = [
       'groovy':          'org.codehaus.groovy:groovy-all',
       //We literally ONLY bring this in for one method call into PropertyUtils so we should clone that code
       //instead of bringing in an entire jar perhaps...?
       'commons-beans':   'commons-beanutils:commons-beanutils:1.9.4',

       'jaxb':            'javax.xml.bind:jaxb-api:2.3.0',
       'slf4j-api':       'org.slf4j:slf4j-api',
       'logback-classic': 'ch.qos.logback:logback-classic',
       'guice':           'com.google.inject:guice:4.2.2',
       'guava':           'com.google.guava:guava:30.1.1-jre',
       'apache-commons-io': 'commons-io:commons-io:2.4',
       'selenium':        'org.seleniumhq.selenium:selenium-java:2.53.1',
       'twitter-hpack':   'com.twitter:hpack:v1.0.1',
       
       'hibernate':       'org.hibernate:hibernate-core:5.4.10.Final',
       'hibernate-validator':       'org.hibernate:hibernate-validator:6.1.5.Final',
       'el-for-validator': 'org.glassfish:javax.el:3.0.0',
       
       'log4jdbc':        'com.googlecode.log4jdbc:log4jdbc:1.2',
       'h2db':            'com.h2database:h2:1.4.200',

       'acme-sslcerts':   'org.shredzone.acme4j:acme4j-client:2.1',
       'acme-utils':      'org.shredzone.acme4j:acme4j-utils:2.1',

       'commons-lang':              'org.apache.commons:commons-lang3',
       'jackson':                   'com.fasterxml.jackson.core:jackson-databind',
       'jackson-annotations':       'com.fasterxml.jackson.core:jackson-annotations',
       'jackson-java-time':         'com.fasterxml.jackson.datatype:jackson-datatype-jsr310',
       'jackson-parameter-names':   'com.fasterxml.jackson.module:jackson-module-parameter-names',
	   
       'micrometer':      'io.micrometer:micrometer-core:1.6.5',
       'elastic-search': 'org.elasticsearch.client:elasticsearch-rest-client:7.6.1',

       'hikari-cp':       'org.hibernate:hibernate-hikaricp:5.4.10.Final',

       'grpc-protobuf': 'io.grpc:grpc-protobuf:1.29.0',
       'grpc-stub': 'io.grpc:grpc-stub:1.29.0',
       'grpc-json': 'com.google.protobuf:protobuf-java-util:3.11.4'
    ]

}

if(project.hasProperty('projVersion')) {
   println("Java Version="+ System.getProperty("java.version"))
}

gradle.taskGraph.whenReady { taskGraph ->
   if(taskGraph.hasTask(publish)) {
      println("graph has task PUBLISH!!!")
      if(!project.hasProperty('projVersion')) {
         throw new RuntimeException("You must have -PprojVersion set to run the publish task which your task depends on as sonas needs release numbers")
      }
   }
}

allprojects {
   apply plugin: 'jacoco' //code coverage

   buildDir = file('output')

   repositories {
      mavenCentral()
   }

   jacoco {
      toolVersion = '0.8.5'
   }

}

subprojects {
   apply plugin: 'java-library'
   apply plugin: 'checkstyle'
   apply plugin: 'eclipse'
   apply plugin: 'idea'
   apply plugin: 'signing'
   apply plugin: 'maven-publish'
   apply plugin: 'com.jfrog.bintray'

   group = 'org.webpieces'

   def currentJvm = System.getProperty("java.version") + " (" + System.getProperty("java.vm.vendor") + " " + System.getProperty("java.vm.version") + ")"

   if(project.hasProperty('projVersion')) {
      if(project.projVersion.replaceAll("[^.]","").length() != 2) {
         throw new GradleException("projVersion must be the full version!")
      }
     project.version = project.projVersion
     println("CREATING RELEASE VERSION "+project.name+":"+project.version+"  jvm="+currentJvm)
   } else {
     project.version = '2.1-developer'
     println("CREATING DEVELOPER VERSION "+project.name+":"+project.version+"  jvm="+currentJvm)
   }

   ext {
      //This is an input directory that we read jars from if they are not in a repo somewhere
      fixedLibDir = file('lib')
      toStagingDir = file(new File(buildDir, 'alljars'))
      github_org = 'deanhiller'
      project_name = 'webpieces'
   }
   //doing this modifies the mvn artifact id and we can't seem to reset it
   //archivesBaseName = "webpieces-${it.name}"

   checkstyle {
       configFile = rootProject.file('config/checkstyle.xml')
   }

   repositories {
       mavenCentral()
   }
   
   dependencies {

       implementation platform('com.google.guava:guava-bom:30.1.1-jre')
       implementation platform('com.google.protobuf:protobuf-bom:3.15.6')
       implementation platform('com.fasterxml.jackson:jackson-bom:2.12.2')
       implementation platform('io.grpc:grpc-bom:1.36.1')

       implementation 'javax.inject:javax.inject'
       implementation 'org.slf4j:slf4j-api'

       runtimeOnly 'ch.qos.logback:logback-classic'

       // Include any jars dropped into {project}/lib directory
       compile fileTree(dir: 'lib', include: '*.jar')

       testCompile 'junit:junit'

       constraints {

           implementation 'javax.inject:javax.inject:1'
           implementation 'ch.qos.logback:logback-classic:1.2.3'
           implementation 'com.fasterxml.jackson.core:jackson-annotations:2.12.2'
           implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.2'
           implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.2'
           implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names:2.12.2'
           implementation 'org.apache.commons:commons-lang3:3.5'
           implementation 'org.codehaus.groovy:groovy-all:2.4.6'
           implementation 'org.slf4j:slf4j-api:1.7.30'

           testImplementation 'junit:junit:4.12'

       }

   }


   //We could do this just for the template projects, BUT during debugging, it is sooo
   //damn nice to have the var names, it is worth the performance penalty I think though
   //we could change this
   [compileJava, compileTestJava]*.options.collect {options ->
     options.compilerArgs.add '-parameters'

     //For windows only, to get the TestI18n working(there is chinese text in the *.java file screwing 
     //windows up, we either have to move that to a file(annoying) or turn on utf-8
     options.encoding = 'UTF-8'
   }

   if (JavaVersion.current().isJava8Compatible()) {
     tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        //noinspection SpellCheckingInspection
        options.addStringOption('Xdoclint:none', '-quiet')
     }
   }

   jar {
      //TODO: Share the source and binary manifest code!!! so changes are done in one place
      manifest {
        def git_cmd = "git rev-parse HEAD"
        def git_proc = git_cmd.execute()
        ext.revision = git_proc.text.trim()
        attributes("Implementation-Title": project.name,
                   "Implementation-Version": version,
                   "SCM-Revision": revision
                   )
      }
   }

   task javadocJar(type: Jar, dependsOn: javadoc) {
      archiveClassifier = 'javadoc'
      from 'build/docs/javadoc'
      manifest {
        def git_cmd = "git rev-parse HEAD"
        def git_proc = git_cmd.execute()
        ext.revision = git_proc.text.trim()
        attributes("Implementation-Title": project.name,
                   "Implementation-Version": project.version,
                   "SCM-Revision": revision
                   )
      }
   }

   
   jacocoTestReport {
      additionalSourceDirs.setFrom files(sourceSets.main.allSource.srcDirs)
      sourceDirectories.setFrom files(sourceSets.main.allSource.srcDirs)
      classDirectories.setFrom  files(sourceSets.main.output)
/*
      classDirectories = files(sourceSets.main.output.filter { file ->
         if(file.getName().endsWith("Exception.class")) {
            print("Excluded:"+file.getName());
            return false;
         }
         print("Included:"+file.getName());
         return true;
      })
*/
      executionData.from = fileTree(buildDir).include("/jacoco/*.exec")
      reports {
          html.enabled = true
          xml.enabled = true
          csv.enabled = false
      }
   }

   jacocoTestReport.dependsOn test
   check.dependsOn jacocoTestReport

   task sourcesJar(type: Jar) {
      archiveClassifier = 'sources'
      from sourceSets.main.allSource
      manifest {
        def git_cmd = "git rev-parse HEAD"
        def git_proc = git_cmd.execute()
        ext.revision = git_proc.text.trim()
        attributes("Implementation-Title": project.name,
                   "Implementation-Version": project.version,
                   "SCM-Revision": revision
                   )
      }
   }

   //This is really only needed for devrouter, embeddablewebserver, http-client, and embeddablehttpproxy
   //I wonder if we can list out those few projects and this task to each one and the assemble.dependsOn as well
   //let's at least copy all jars to a single directory to use in creating an application...
   //ALSO, this DELETES jars we no longer use so it has to be different directory than the dest jar we are creating as well
   task syncJars(type: Sync, dependsOn: 'jar') {
       from(configurations.compile) {}
       from(fixedLibDir) {}
       from(libsDir) {}
       into toStagingDir
   }

//   processResources.dependsOn(":webserver:http-webserver:writeVersion")
   assemble.dependsOn('syncJars')

   test {
      //Tests fail with wifi OFF and ipv6....force ipv4 for now
      systemProperty "java.net.preferIPv4Stack", true

      beforeTest{ descr ->
        logger.warn("Starting Test ${descr.className} : ${descr.name}")
      }
      afterTest { descr, result ->
        def totalTime = result.endTime - result.startTime
        logger.warn("Test complete ${descr.className} : ${descr.name} TOTAL TIME=${totalTime}")
      }
      testLogging {
        events "failed"
        exceptionFormat "full"
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
               println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
      }
   }

   //Using eclipse bin folder is WAY too common.  use outputeclipse instead so we can safely ignore it
   eclipse {
      classpath {
         defaultOutputDir = file('eclipse-output')
      }
   }

   eclipseProject {
      doLast {
         // https://discuss.gradle.org/t/how-to-write-properties-to-3rd-party-eclipse-settings-files/6499/2

         def props = new Properties()
         file(".settings/org.eclipse.jdt.core.prefs").withInputStream {
            stream -> props.load(stream)
         }
         props.setProperty("org.eclipse.jdt.core.compiler.codegen.methodParameters", "generate")
         file(".settings/org.eclipse.jdt.core.prefs").withOutputStream {
            stream -> props.store(stream, null)
         }
      }
   }
   
   publishing {  
      repositories {
         maven {
            name = 'sonatype'
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            if(project.properties.sonatypeUsername && project.properties.sonatypePassword) {
               credentials {
                  username = sonatypeUsername
                  password = sonatypePassword
               }
            }
         }
         maven {
            name = 'myTemp'
            url = "file:/tmp/myRepo/"
         }
      }
      publications {
         mavenJava(MavenPublication) {
            from components.java
            groupId group
            pom {
                name = project.name
                description = "Not filled in for this project"
                //'Someone forgot to fill this in.  See http://stackoverflow.com/questions/38272550/how-to-fail-the-gradle-build-if-subproject-is-missing-a-property'
                url = "https://github.com/${github_org}/${project_name}"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = 'dhiller'
                        name = 'Dean Hiller'
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/${github_org}/${project_name}.git"
                    developerConnection = "scm:git:git@github.com:${github_org}/${project_name}.git"
                    url = "https://github.com/${github_org}/${project_name}.git"
                }
            }
               
            artifact sourcesJar
            artifact javadocJar
         }
      }
   }


   if(project.properties.sonatypeUsername && project.properties.sonatypePassword) {
      if (!project.hasProperty("signing.keyId")) {
         throw new IllegalStateException("signing.keyId property required for sonas release.  see https://docs.gradle.org/current/userguide/signing_plugin.html")
      }
      //To upload to nexus, your key must be uploaded to https://keys.openpgp.org/ as well.
      //generating new key is found in documentation on gradle signing plugin
      signing {
         //let's only sign if releasing to sonatype repo as we have to
         //BUT even if we remove the signing section, we still end up generating *.md5 and *.sha1 so apparently things
         //are still being signed.  This signing section only seems to make the *.asc get generated. Then on top of that,
         //the *asc file is then hashed generating *.asc.md5 and *.asc.sha1 which is annoying. 
         sign publishing.publications.mavenJava
      }
   }

   //we only want to upload if the build passed first..ie. tests, etc.
/*   uploadArchives.dependsOn('build')
      */
  
   if (!project.hasProperty("projVersion")) {
     ext.bintrayUsername = "nousername"
     ext.bintrayApiKey = "nokey"
   } 


   //if(project.hasProperty('projVersion')) {
      bintray {
         user = bintrayUsername
         key = bintrayApiKey
         publications = ['mavenJava'] 
         pkg {
             repo = 'maven'
             name = project.name
             licenses = ['Apache-2.0']
             vcsUrl = "https://github.com/${github_org}/${project_name}"
             publicDownloadNumbers = true
             version {
                name = project.version
                desc = publishing.publications.mavenJava.pom.description
                vcsTag = project.version
                attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
            }
         }
      }

      bintrayUpload {
        dependsOn 'build', 'javadocJar', 'sourcesJar', 'generatePomFileForMavenJavaPublication'
      }

/*
    nexusStaging {  
        packageGroup = 'org.webpieces'
        stagingProfileId = '683f50db65952'
        username = sonatypeUsername
        password = sonatypePassword
    }
*/
   //}

}

//WE should not need this target... (it does this by default but we can't seem to depend on it...wait until we are on 5.3)
task publishMavenJavaPublicationToMyTempRepository {
   dependsOn {
      project.subprojects.collectMany { project -> project.tasks }.findAll { task -> task.name.equals("publishMavenJavaPublicationToMyTempRepository") }
   }
}

//Gradle has publishToMavenLocal and publish by default.
//override the publish to throw an exception if projVersion is not set
task publish {
   dependsOn {
      project.subprojects.collectMany { project -> project.tasks }.findAll { task -> task.name.equals("publishMavenJavaPublicationToSonatypeRepository") }
   }
}

//closeRepository.dependsOn('publish')
//promoteRepository.dependsOn('closeRepository')
//promoteRepository.doFirst {
//  println("sleeping 4 minutes after close repo and before promote or promote fails sometimes")
//  Thread.sleep(80000)
//  println("done sleeping go promote repo now");
//}

task printTasks {
    doLast {
       project.tasks.collect { task -> println("task="+task+" dependsOn="+task.dependsOn) }
    }
}

if(project.hasProperty('projVersion')) {
   task release(dependsOn: ':webserver:githubRelease')
} else {
   task release(dependsOn: [':webserver:build', ':publishMavenJavaPublicationToMyTempRepository'])
}

//NOTE: The task name MUST BE this (even though I wanted it to be codeCoverage) because codecov.io looks for files
//which are based off this name
task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom  files(subprojects.sourceSets.main.output)
    executionData.setFrom files(subprojects.jacocoTestReport.executionData).filter { f -> f.exists() }
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
}

//we don't do java plugin on top level on purpose as it is not a java
//project BUT we need build and clean to work inline with the java projects
task build(dependsOn: ':jacocoRootReport')

task clean() {
   doLast {
      delete "${buildDir}"
   }
}
