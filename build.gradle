allprojects {

}

subprojects {
   apply plugin: 'java'
   apply plugin: 'eclipse'
   apply plugin: 'idea'

   buildDir = file('output')
   project.ext.fixedLibDir = file('lib')
   project.ext.stagingDir = file('staging')
   project.ext.toStagingDir = file(new File(buildDir, project.name))
   project.ext.toStagingLibsDir = file(new File(toStagingDir, 'lib'))

   repositories {
       mavenCentral()
   }
   dependencies {
       testCompile 'junit:junit:4.11'
       //for logging in tests
       testCompile 'org.codehaus.groovy:groovy-all:2.4.6'

       compile 'javax.inject:javax.inject:1'
       compile 'org.slf4j:slf4j-api:1.7.21'
       compile 'ch.qos.logback:logback-core:1.1.7'
       compile 'ch.qos.logback:logback-classic:1.1.7'
       compile 'joda-time:joda-time:2.9.4'

       //This line includes any jars a developer drops into {project}/lib directory
       compile fileTree(dir: 'lib', include: '*.jar')
   }

   //let's at least copy all jars to a single directory to use in creating an application...
   task syncJars(type: Sync) {
       from(configurations.compile) {}
       from(fixedLibDir) {}
       into toStagingLibsDir
   }

   assemble.dependsOn('syncJars')

   test{
      beforeTest{ descr ->
        logger.warn("Starting Test ${descr.className} : ${descr.name}")
      }
   }

    task checkJavaVersion << {
       if (!JavaVersion.current().isJava8()) {
        String message = "ERROR: Java 1.8 required but " +
                         JavaVersion.current() + 
                         " found. Change your JAVA_HOME environment variable.";
        throw new IllegalStateException(message);
       }
    }

    compileJava.dependsOn checkJavaVersion

}

project(':core-channelmanager2') {
    dependencies {
        compile project(':core-util'), project(':core-datawrapper'), project(':core-ssl')
    }
}

project(':core-ssl') {
    dependencies {
        compile project(':core-datawrapper')
    }
}

project(':core-asyncserver') {
    dependencies {
        compile project(':core-channelmanager2')
    }
}

project(':http-parser2') {
    dependencies {
        compile project(':core-datawrapper')
    }
}

project(':http-parser1_1') {
    dependencies {
        compile project(':core-datawrapper')
    }
}

project(':http-client') {
    dependencies {
        compile project(':core-channelmanager2'), project(':http-parser1_1')
    }
}

project(':http-frontend') {
    dependencies {
        compile project(':core-asyncserver'), project(':http-parser1_1'), project(':http-client')
    }
}

project(':http-router') {
    dependencies {
        compile 'com.google.inject:guice:4.0'
        project(':http-parser1_1')
        compile project(':core-util')
    }
}

project(':http-router-dev') {
    dependencies {
        compile project(':http-router')
        compile project(':runtimecompile')
        testCompile project(':core-mock')
    }
}

project(':http-templating') {
    dependencies {
        compile project(':core-util')
        compile 'org.codehaus.groovy:groovy-all:2.4.6'
    }
}

project(':embeddablehttpproxy') {
    dependencies {
        compile 'com.google.inject:guice:4.0'
        compile 'com.google.guava:guava:19.0'
        compile project(':http-frontend'), project(':http-parser1_1'), project(':http-client')
    }
}

project(':full-httpproxy') {
    dependencies {
        compile project(':embeddablehttpproxy')
        compile 'org.codehaus.groovy:groovy-all:2.4.6' //we use groovy in logback.xml
    }
}

project(':embeddablewebserver') {
    dependencies {
        compile 'com.google.inject:guice:4.0'
        compile project(':http-frontend'), project(':http-parser1_1'), project(':http-router')
        project(':http-templating')
    }
}

project(':embeddabledevwebserver') {
    dependencies {
        compile project(':embeddablewebserver')
        compile project(':http-router-dev')
    }
}

project(':full-webserver') {
    dependencies {
        compile project(':embeddablewebserver')
    }
}

project(':runtimecompile') {
    dependencies {
        compile 'org.eclipse.jdt.core.compiler:ecj:4.5.1'
        compile project(':core-util')
    }
}

