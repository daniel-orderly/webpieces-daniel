buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    }
}

//plugins loaded from special gradle plugin repo...
plugins {
    //google "gradle build scan" or https://github.com/gradle/gradle-build-scan-quickstart
    // essentially, ./gradlew build -Dscan
    id 'com.gradle.build-scan' version '1.0' //google "gradle build scan"
    id 'com.dorongold.task-tree' version '1.2.2' //This prints out a task tree dependency (pretty print)
}

ext {
    // Project constants

    /*
     * Dependencies can be named so that sub-projects can reference consistent version of them.
     * dependencies {
     *     compile deps['joda-time']
     * }
     */
    deps = [
       'junit':           'junit:junit:4.11',  
       'groovy':          'org.codehaus.groovy:groovy-all:2.4.6',
       'javax-inject':    'javax.inject:javax.inject:1',
       'slf4j-api':       'org.slf4j:slf4j-api:1.7.21',
       //do we need this one...
       //'logback-core':  'ch.qos.logback:logback-core:1.1.7', 
       'logback-classic': 'ch.qos.logback:logback-classic:1.1.7',
       'joda-time':       'joda-time:joda-time:2.9.4',
       'guice':           'com.google.inject:guice:4.0',
       'guava':           'com.google.guava:guava:19.0',
       'eclipse-compiler':'org.eclipse.jdt.core.compiler:ecj:4.5.1',
       'apache-commons-io': 'org.apache.commons:commons-io:1.3.2'
    ]   

}

//Section needed by the above com.gradle.build-scan plugin that was added
buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

allprojects {
}

subprojects {
   apply plugin: 'java'
   apply plugin: 'eclipse'
   apply plugin: 'idea'
   apply plugin: 'signing'
   apply plugin: 'maven'

   group = 'org.webpieces'
   version = '1.9.6'
   buildDir = file('output')

   ext {
      //This is an input directory that we read jars from if they are not in a repo somewhere
      fixedLibDir = file('lib')
      toStagingDir = file(new File(buildDir, 'alljars'))
      github_org = 'deanhiller'
      project_name = 'webpieces'
   }
   archivesBaseName = "webpieces-${it.name}"

   repositories {
       mavenCentral()
   }
   dependencies {
       testCompile deps['junit']
       //for logging in tests
       testCompile deps['groovy']

       compile deps['javax-inject']
       compile deps['slf4j-api']
       //do we need this one..
       //compile deps['logback-core']
       compile deps['logback-classic']
       compile deps['joda-time']

       //This line includes any jars a developer drops into {project}/lib directory
       compile fileTree(dir: 'lib', include: '*.jar')
   }

   //We could do this just for the template projects, BUT during debugging, it is sooo
   //damn nice to have the var names, it is worth the performance penalty I think though
   //we could change this
   [compileJava, compileTestJava]*.options.collect {options ->
     options.compilerArgs.add '-parameters'
   }

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        //noinspection SpellCheckingInspection
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

   jar {
      //TODO: Share the source and binary manifest code!!! so changes are done in one place
      manifest {
        def git_cmd = "git rev-parse HEAD"
        def git_proc = git_cmd.execute()
        ext.revision = git_proc.text.trim()
        attributes("Implementation-Title": project.name,
                   "Implementation-Version": version,
                   "SCM-Revision": revision
                   )
      }
   }

   task javadocJar(type: Jar, dependsOn: javadoc) {
      classifier = 'javadoc'
      from 'build/docs/javadoc'
      manifest {
        def git_cmd = "git rev-parse HEAD"
        def git_proc = git_cmd.execute()
        ext.revision = git_proc.text.trim()
        attributes("Implementation-Title": project.name,
                   "Implementation-Version": version,
                   "SCM-Revision": revision
                   )
      }
   }

   task sourcesJar(type: Jar) {
      classifier = 'sources'
      from sourceSets.main.allSource
      manifest {
        def git_cmd = "git rev-parse HEAD"
        def git_proc = git_cmd.execute()
        ext.revision = git_proc.text.trim()
        attributes("Implementation-Title": project.name,
                   "Implementation-Version": version,
                   "SCM-Revision": revision
                   )
      }
   }

   artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
   }

   signing {
      sign configurations.archives
   }

   //This is really only needed for devrouter, embeddablewebserver, http-client, and embeddablehttpproxy
   //I wonder if we can list out those few projects and this task to each one and the assemble.dependsOn as well
   //let's at least copy all jars to a single directory to use in creating an application...
   //ALSO, this DELETES jars we no longer use so it has to be different directory than the dest jar we are creating as well
   task syncJars(type: Sync, dependsOn: 'jar') {
       from(configurations.compile) {}
       from(fixedLibDir) {}
       from(libsDir) {}
       into toStagingDir
   }

   assemble.dependsOn('syncJars')

   test{
      beforeTest{ descr ->
        logger.warn("Starting Test ${descr.className} : ${descr.name}")
      }
   }

   //Using eclipse bin folder is WAY too common.  use outputeclipse instead so we can safely ignore it
   eclipse {
      classpath {
         defaultOutputDir = file('eclipse-output')
      }
   }

   eclipseProject {
      doLast {
         // https://discuss.gradle.org/t/how-to-write-properties-to-3rd-party-eclipse-settings-files/6499/2

         def props = new Properties()
         file(".settings/org.eclipse.jdt.core.prefs").withInputStream {
            stream -> props.load(stream)
         }
         props.setProperty("org.eclipse.jdt.core.compiler.codegen.methodParameters", "generate")
         file(".settings/org.eclipse.jdt.core.prefs").withOutputStream {
            stream -> props.store(stream, null)
         }
      }
   }

   uploadArchives {
      
      repositories {
        mavenDeployer {
            repository(url: "file://localhost/tmp/myRepo/")
            pom.project {
              name project.name 
              description 'Someone forgot to fill this in.  See http://stackoverflow.com/questions/38272550/how-to-fail-the-gradle-build-if-subproject-is-missing-a-property'
              url "https://github.com/${github_org}/${project_name}"
              licenses {
                 license {
                    name 'Apache License 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0'
                    distribution 'repo'
                 }
              }
              scm {
                 url "https://github.com/${github_org}/${project_name}.git"
                 connection "scm:git:https://github.com/${github_org}/${project_name}.git"
                 developerConnection "scm:git:git@github.com:${github_org}/${project_name}.git"
              }
              organization {
                 name github_org
                 url "https://github.com/${github_org}"
              }
              developers {
                  developer {
                      id 'dhiller'
                      name 'Dean Hiller'
                  }
              }
            }
        }
      }
   }
}

