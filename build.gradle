allprojects {

}

subprojects {
   apply plugin: 'java'
   apply plugin: 'eclipse'
   apply plugin: 'idea'

   buildDir = file('output')
   project.ext.fixedLibDir = file('lib')
   project.ext.stagingDir = file('staging')
   project.ext.toStagingDir = file(new File(buildDir, project.name))
   project.ext.toStagingLibsDir = file(new File(toStagingDir, 'lib'))

   repositories {
       mavenCentral()
   }
   dependencies {
       testCompile 'junit:junit:4.11'

       compile 'javax.inject:javax.inject:1'
       compile 'org.slf4j:slf4j-api:1.7.5'
       compile 'ch.qos.logback:logback-classic:1.0.13'
       compile 'org.codehaus.groovy:groovy-all:2.1.9' //we use groovy in logback.xml

       //This line includes any jars a developer drops into {project}/lib directory
       compile fileTree(dir: 'lib', include: '*.jar')
   }

   //let's at least copy all jars to a single directory to use in creating an application...
   task syncJars(type: Sync) {
       from(configurations.compile) {}
       from(fixedLibDir) {}
       into toStagingLibsDir
   }

   assemble.dependsOn('syncJars')

   test{
      beforeTest{ descr ->
        logger.warn("Starting Test ${descr.className} : ${descr.name}")
      }
   }

    task checkJavaVersion << {
       if (!JavaVersion.current().isJava8()) {
        String message = "ERROR: Java 1.8 required but " +
                         JavaVersion.current() + 
                         " found. Change your JAVA_HOME environment variable.";
        throw new IllegalStateException(message);
       }
    }

    compileJava.dependsOn checkJavaVersion

}

project(':core-channelmanager2') {
    dependencies {
        compile project(':core-util')
    }
}

project(':core-asyncserver') {
    dependencies {
        compile project(':core-channelmanager2')
    }
}

project(':http-parser') {
    dependencies {
        compile project(':core-datawrapper')
    }
}

project(':http-client') {
    dependencies {
        compile project(':core-channelmanager2'), project(':http-parser')
    }
}

project(':embeddablehttpproxy') {
    dependencies {
        compile 'com.google.inject:guice:3.0'
        compile project(':core-asyncserver'), project(':http-parser'), project(':http-client')
    }
}

project(':full-httpproxy') {
    dependencies {
        compile project(':embeddablehttpproxy')
    }
}
