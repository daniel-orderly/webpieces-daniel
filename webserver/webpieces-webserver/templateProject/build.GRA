
//NOTE: There is a picture on https://docs.gradle.org/current/userguide/java_plugin.html as to the default gradle targets for the java
//and here we modify that picture a little so that jar depends on compileHtml so that compiled html files end up in the production jar
//file.  The dev-server does not have this since it relies on the source files to begin with recompiling when changes happen

allprojects {

}

subprojects {
   apply plugin: 'java'
   apply plugin: 'eclipse'
   apply plugin: 'idea'

   //These 2 lines make it so you don't have to use @Param annotation on 
   //every controller method which can get quite annoying.  Instead, webpieces
   //will just use reflection to grab the param names which is just as fast as 
   //annotations
   [compileJava, compileTestJava]*.options.collect {options ->
     options.compilerArgs.add '-parameters'
   }

   buildDir = file('output')
   project.ext.fixedLibDir = file('lib')
   project.ext.stagingDir = file('staging')
   project.ext.toStagingDir = file(new File(buildDir, 'alljars'))

   repositories {
       mavenCentral()
   }
   dependencies {
       testCompile 'junit:junit:4.11'

       //add global dependencies for all projects here....
       compile 'javax.inject:javax.inject:1'
       compile 'com.google.inject:guice:4.0'
       compile 'org.slf4j:slf4j-api:1.7.5'
       compile 'ch.qos.logback:logback-classic:1.0.13'

       //This line includes any jars a developer drops into {project}/lib directory
       compile fileTree(dir: 'lib', include: '*.jar')
   }

   //This copies new jars over from ivy/maven and project/lib and finally our built up jar so all jars are in
   //one output directory AND it deletes jars in there that are no longer part of any of those locations as well since
   //it is a task of type: Sync
   task syncJars(type: Sync, dependsOn: 'jar') {
       from(configurations.compile) {}
       from(fixedLibDir) {}
       from(libsDir) {}
       into toStagingDir
   }

   assemble.dependsOn('syncJars')

   test{
      beforeTest{ descr ->
        logger.warn("Starting Test ${descr.className} : ${descr.name}")
      }
   }

}

project(':APPNAME') {
    dependencies {
        //add maven dependencies here
        //compile 'javax.inject:javax.inject:1'

        //IF you add dependencies on other projects locally, you need to modify CLASSNAMEDevServer.java to include those
        //source paths or it will not recompile that code as it changes
    }
}

project(':dev-server') {
    dependencies {
        //add dev-server only dependencies here if you have any(you shouldn't most likely)
        compile project(':APPNAME')
    }
}
