import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'jacoco' //code coverage
apply plugin: 'idea'

sourceSets {
    test {
        resources {
            //This ADDS src/test/java/**/*.html and we still read in src/test/resources/**
            srcDirs = ["src/test/java", "src/test/resources"]
            excludes = ["**/*.java"]
        }
    }
}

//Intellij Idea has a weird quirk we need to avoid
if (System.getProperty('idea.active')) {

    // to have classes and resources in the same output directory
    idea {
        module {
            testOutputDir file("out/production/classes")
        }
    }
}

//ok, this is the deal here.  JPA/hibernate made the decision to look for a persistence.xml file
//and scan for classes with @Entity in the directory OR jar with that xml file only
//maven(and I hate this) a long time ago separated src/main/java and src/main/resources but
//this screws tools in many situations like this one so this puts it back so the output is at
//least put to the same location
//sourceSets.test.output.resourcesDir = sourceSets.test.output.classesDir

//we were told to remove this line so do it and retest it all ..cmd line build, eclipse import and test, intellij import and test
//compileJava.doLast { tasks.processResources.execute() }

task copyPersistenceXml(type: Copy, dependsOn: 'compileTestJava') {
    from 'src/test/resources/META-INF'
    into 'output/classes/java/test/META-INF'
    include 'persistence.xml'
    //outputs.upToDateWhen { false }
}

test.dependsOn ("copyPersistenceXml")

dependencies {
    compile deps['guice']
    compile deps['acme-sslcerts']
    compile project(':http:http-frontend2')
    compile project(':webserver:http-templating'), project(':webserver:http-router')

    testCompile project(':core:core-mock')
    testCompile project(':core:core-ddl')
    testCompile project(':webserver:http-webserver-test')
    testCompile project(':webserver:http-router-dev')
    testCompile project(':webserver-plugins:plugin-hibernate')
    testCompile deps['h2db']
    testCompile project(':webserver-plugins:plugin-json-jackson')

    testCompile deps['selenium']
}
//write to properties file to easily get build properties like version
//task writeVersion(type: WriteProperties) {
//    property "version", project.version
//    outputFile = file(new File(buildDir, "resources/version.properties"))
//}

publishing.publications.mavenJava.pom.description='The full webpieces server AS A library'

test {
    if (!project.hasProperty('includeSelenium')) {
        exclude '**/*Selenium*'
    }
}

