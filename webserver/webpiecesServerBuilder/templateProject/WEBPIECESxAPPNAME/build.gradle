//This file is used when we build the whole webpieces project AND is not part of template generation

publishing.publications.mavenJava.pom.description='fake project used in testing.  ignore this jar'

sourceSets {
    main {
        resources {
            srcDirs += ["src/main/java"]
            excludes = ["logback.xml"]
        }
    }
}


    //Intellij Idea has a weird quirk we need to avoid
    if (System.getProperty('idea.active')) {

        // to have classes and resources in the same output directory
        idea {
            module {
                outputDir file("out/production/classes")
            }
        }
    }

    dependencies {
        compile project(':webserver:http-webserver')
        //we start people off with the hibernate plugin
        compile project(':webserver-plugins:plugin-hibernate')
        compile project(':webserver-plugins:plugin-json-jackson')
        compile project(':webserver-plugins:plugin-backend')
        compile project(':webserver-plugins:plugin-install-sslcert')
        compile project(':webserver-plugins:plugin-properties')
        compile deps['commons-lang'] //used in json escaping
        //for connection pooling: https://mvnrepository.com/artifact/org.hibernate/hibernate-hikaricp
        compile deps['hikari-cp']
  
        testCompile project(':core:core-ddl')
        testCompile project(':core:core-mock')
        testCompile project(':webserver-plugins:plugin-h2db')
        testCompile project(':webserver:http-webserver-test')
        testCompile deps['selenium']
    }

//NOTE: jar section has to go AFTER dependencies section to read all dependencies
jar {
    manifest.attributes(
            "Class-Path": configurations.runtime.files.collect { it.name }.join(' '),
            "Main-Class": 'webpiecesxxxxxpackage.Server'
    )
}

compileJava.doLast {
   logger.warn("processed resources="+sourceSets.main.output.resourcesDir)
}

    //ok, this is the deal here.  JPA/hibernate made the decision to look for a persistence.xml file
    //and scan for classes with @Entity in the directory OR jar with that xml file only
    //maven(and I hate this) a long time ago separated src/main/java and src/main/resources but
    //this screws tools in many situations like this one so this puts it back so the output is at
    //least put to the same location
    //sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDir

task copyPersistenceXml(type: Copy, dependsOn: 'compileTestJava') {
    from 'src/main/resources/META-INF'
    into 'output/classes/java/main/META-INF'
    include 'persistence.xml'
    //outputs.upToDateWhen { false }
}

test.dependsOn ("copyPersistenceXml")

test {
    if (!project.hasProperty('includeSelenium')) {
        exclude '**/*Selenium*'
    }
}
