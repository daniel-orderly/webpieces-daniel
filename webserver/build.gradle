project.ext {
  stagingDirName = 'webpieces-webserver'
  outputStagingDir = new File(buildDir, stagingDirName)
}

project('webpieces-webserver:templateProject:TEMPLATEAPPNAME-prod') {
    dependencies {
        compile project(':webserver:embeddablewebserver')
    }
}

project('webpieces-webserver:templateProject:TEMPLATEAPPNAME-dev') {
    dependencies {
        compile project(':webserver:embeddablewebserver')
        compile project(':webserver:http-router-dev')
        compile project(':webserver:http-templating-dev')
        compile project(':webserver:webpieces-webserver:templateProject:TEMPLATEAPPNAME-prod')
    }
}

task stageTemplate(type: Copy) {
    from '.'
    into buildDir
    include stagingDirName + '/**'
    exclude stagingDirName + '/output'
    exclude stagingDirName + '/.classpath'
    exclude stagingDirName + '/.project'
    exclude stagingDirName + '/.settings'
    exclude stagingDirName + '/templateProject/.classpath'
    exclude stagingDirName + '/templateProject/.project'
    exclude stagingDirName + '/templateProject/.settings'
    exclude stagingDirName + '/templateProject/output'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-prod/output'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-prod/bin'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-prod/.classpath'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-prod/.project'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-prod/.settings'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-dev/output'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-dev/bin'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-dev/.classpath'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-dev/.project'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-dev/.settings'
}

task stageWebServer(type: Sync, dependsOn: ['embeddablewebserver:assemble', 'stageTemplate']) {
    from childProjects['embeddablewebserver'].toStagingDir
    into new File(outputStagingDir, 'lib-prod')
}

task stageDevServer(type: Sync, dependsOn: ['http-router-dev:assemble', 'http-templating-dev:assemble', 'stageWebServer']) {
    from childProjects['http-router-dev'].toStagingDir
    from childProjects['http-templating-dev'].toStagingDir
    into new File(outputStagingDir, 'lib-development')
    exclude { details ->
       def fileNames = stageWebServer.source.collect{ entry -> entry.getName()}
       fileNames.contains(details.file.getName())
    }
}

task stageProjectCreator(type: Sync, dependsOn: 'projectcreator:assemble') {
    from childProjects['projectcreator'].toStagingDir
    into new File(outputStagingDir, 'lib-creation')
}

assemble.dependsOn(['stageDevServer', 'stageProjectCreator'])
