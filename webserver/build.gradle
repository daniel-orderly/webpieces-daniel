apply plugin: 'co.riiid.gradle'

project.ext {
  stagingDirName = 'webpiecesServerBuilder'
  outputStagingDir = new File(buildDir, stagingDirName)
}

project('webpiecesServerBuilder:templateProject:TEMPLATEAPPNAME-prod') {
    sourceSets {
        extraTest {
            resources {
                srcDirs = ["src/main/java"]
                includes = ["**/*.html", "**/*.tag"]
            }
        }
        test {
            resources {
                //This ADDS src/main/java/**/*.html and we still read in src/test/resources/**
                source extraTest.resources
            }
        }
    }

    dependencies {
        compile project(':webserver:http-webserver')

        testCompile project(':webserver:http-webserver-test')
        testCompile deps['selenium']
    }

    //task uploadArchives(overwrite: true) << {
    //}
}

project('webpiecesServerBuilder:templateProject:TEMPLATEAPPNAME-dev') {
    dependencies {
        compile project(':webserver:http-webserver')
        compile project(':webserver:http-router-dev')
        compile project(':webserver:http-templating-dev')
        compile project(':webserver:webpiecesServerBuilder:templateProject:TEMPLATEAPPNAME-prod')
    }
    
    //task uploadArchives(overwrite: true) << {
    //}
}

task stageTemplate(type: Copy) {
    from '.'
    into buildDir
    include stagingDirName + '/**'
    exclude stagingDirName + '/output'
    exclude stagingDirName + '/.classpath'
    exclude stagingDirName + '/.project'
    exclude stagingDirName + '/.settings'
    exclude stagingDirName + '/build.gradle.template'
    exclude stagingDirName + '/templateProject/.classpath'
    exclude stagingDirName + '/templateProject/.project'
    exclude stagingDirName + '/templateProject/.settings'
    exclude stagingDirName + '/templateProject/output'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-prod/output'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-prod/bin'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-prod/.classpath'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-prod/.project'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-prod/.settings'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-dev/output'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-dev/bin'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-dev/.classpath'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-dev/.project'
    exclude stagingDirName + '/templateProject/TEMPLATEAPPNAME-dev/.settings'
}

task copyGradleTemplate(type: Copy, dependsOn: 'stageTemplate') {
    from stagingDirName
    into outputStagingDir
    include 'build.gradle.template'
    rename { file -> 'build.gradle' }
    expand(version: version, title: 'ProjectInfo')
    outputs.upToDateWhen { false }
}

task zipGradleTemplate(type: Zip, dependsOn: 'copyGradleTemplate') {
   from buildDir
   include stagingDirName + "/**"
   baseName stagingDirName
}

assemble.dependsOn(['zipGradleTemplate'])

//task uploadArchives(overwrite: true, dependsOn: 'build') << {
//}

if(project.hasProperty('projVersion')) {
    github {
        owner = 'deanhiller'
        repo = 'webpieces'
        token = githubToken
        tagName = version
        name = 'webpiecesServerBuilder'+version
        body = 'Official Release of '+version
        assets = [
            zipGradleTemplate.archivePath
        ]
    }

    githubRelease.dependsOn([':webserver:build', ':promoteRepository'])
    githubRelease {
        doFirst {
            println("releasing to github="+github.assets)
        }
    }
} else {
    task githubRelease(overwrite:true, dependsOn: [':webserver:build', ':uploadArchives2'])
}
